{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,eAAe;AACf,2BAA2B;AAC3B,mBAAmB;AACnB,kBAAkB;AAClB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UC7IA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBa;AACb;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA,kBAAkB,mBAAO,CAAC,mCAAW;AACrC;AACA,kBAAkB,KAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK,IAAI,wBAAwB,EAAE,oBAAoB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://9994.typescript/./src/devTeam.ts","webpack://9994.typescript/webpack/bootstrap","webpack://9994.typescript/./src/index.ts"],"sourcesContent":["\"use strict\";\n/**************************************\n🧩 실습 주제: “우리 개발팀 인력 관리 시스템”\n🧪 주요 학습 포인트\nTypeScript 기본 타입 정리\n인터페이스 / 타입 별칭 활용\n유니온, 인터섹션, 튜플, enum 실전 적용\n함수 선언 및 타입 지정\n배열과 객체의 타입 구조 연습\n\n\n💼 시나리오 설정\n\"웹개발 회사의 개발자 인력을 정리하고 관리하는 시스템을\n만든다.\"\n예제 컨셉\nDeveloper 라는 타입을 만들어서 다양한 개발자들을 표현\n\n개발자들은 각자 역할(Frontend, Backend, Fullstack),\n스킬, 프로젝트 참여 여부 등 정보 가짐\n이 정보를 배열로 관리하고, 필터링하거나 콘솔에 출력\n타입 안정성 유지하면서 함수도 타입화함\n\n\n📖 데이터 및 함수 정의\nRole: 개발자의 역할을 정의한 타입으로,\n\"Frontend\", \"Backend\", \"Fullstack\" 중\n하나만 가능합니다.\n이 타입은 개발자 객체에서 role에 사용됩니다.\n\n((타입정의))\nDeveloper: 개발자에 대한 정보를\n나타내는 타입으로,\n이름, 나이, 역할, 기술, 활동 여부 등의\n속성을 가집니다.\n\n((타입정의))\ndevTeam: 개발자 배열로, 여러 명의 개발자\n정보를 포함하고 있습니다.\n각 개발자는 Developer 타입을 따릅니다.\n\n((함수정의))\ngetActiveDevelopers: 활동 중인 개발자만\n추출하는 함수로,\nisActive 속성이 true인 개발자들만 반환합니다.\n\n((함수정의))\nfindBySkill: 특정 기술(skill)을 가진\n개발자들만 추출하는 함수로,\n각 개발자의 skills 배열에 주어진 기술이\n포함된 경우만 반환합니다.\n\n**************************************/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.devTeam = void 0;\nexports.getActiveDevelopers = getActiveDevelopers;\nexports.findBySkill = findBySkill;\nexports.findByRole = findByRole;\n// 3. 개발자 정보 셋팅: 배열 객체 \nexports.devTeam = [\n    {\n        name: 'John Doe',\n        age: 25,\n        role: 'Frontend',\n        skills: ['HTML', 'CSS', 'JavaScript'],\n        isActive: true\n    },\n    {\n        name: 'Jane Doe',\n        age: 30,\n        role: 'Backend',\n        skills: ['Python', 'Django', 'Java'],\n        isActive: false\n    },\n    {\n        name: 'Bob Smith',\n        age: 28,\n        role: 'Fullstack',\n        skills: ['React', 'Node.js', 'Express'],\n        isActive: true\n    },\n    {\n        name: 'Alice Johnson',\n        age: 22,\n        role: 'Frontend',\n        skills: ['React', 'Redux', 'Sass'],\n        isActive: true\n    },\n    {\n        name: 'Mike Brown',\n        age: 35,\n        role: 'Backend',\n        skills: ['Ruby', 'Rails', 'PostgreSQL'],\n        isActive: false\n    },\n    {\n        name: 'Emma Williams',\n        age: 26,\n        role: 'Fullstack',\n        skills: ['Angular', 'TypeScript', 'GraphQL'],\n        isActive: true\n    },\n    {\n        name: 'Olivia Lee',\n        age: 24,\n        role: 'Frontend',\n        skills: ['Vue', 'Vuex', 'Bulma'],\n        isActive: true\n    },\n    {\n        name: 'Liam Kim',\n        age: 32,\n        role: 'Backend',\n        skills: ['Go', 'Gin', 'MongoDB'],\n        isActive: false\n    },\n    {\n        name: 'Noah White',\n        age: 29,\n        role: 'Fullstack',\n        skills: ['Next.js', 'Prisma', 'Tailwind CSS'],\n        isActive: true\n    }\n];\n// 4. 활동 중인 개발자 필터링 함수정의\n// -> team 파라미터 변수에 devTeam 배열을 받아서\n// 배열값의 객체속성 중 isActive 속성값이 true인 개발자들만 변환\nfunction getActiveDevelopers(team) {\n    return team.filter(dev => dev.isActive);\n}\n// 5. 특정 기술을 가는 개발자 필터링 함수정의\n// -> team 파라미터 변수에 devTeam 배열을 받아서\n// 배열값의 객체속성 중 skills 속성값 중 해당 기술이 있는 개발자들만 변환\nfunction findBySkill(team, skill) {\n    return team.filter(dev => dev.skills.includes(skill));\n}\n// 6. 특정 역할을 가진 개발자 필터링 함수 정의\n// -> team 파라미터 변수에 devTeam 배열을 받아서\n// 배열값의 객체속성 중 role 속성값이\n// 파라미터로 받은 role과 같은 개발자들만 변환\nfunction findByRole(team, role) {\n    return team.filter(dev => dev.role === role);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\n// index.html에서 가장 먼저 불러오는 JS - index.ts\n// -> ts파일은 js파일로 컴파일 후 dist폴더에 bundle.js로 배포\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// 외부 ts 파일 불러오기\nconst devTeam_1 = require(\"./devTeam\");\nfunction greet(name) {\n    return `안녕, ${name}~!`;\n}\nconsole.log(greet(\"찐친 개발자\"));\nconsole.log(greet(\"코딩 마스터\"));\nconsole.log(greet(\"AI 전문가\"));\nconsole.log(greet(\"프로그래머\"));\n// 1. 기본 타입 선언\nconst userName = \"김상중하\";\nconst age = 20;\nconst isActive = true;\nconsole.log(\"기본타입\");\nconsole.log(userName, age, isActive);\n// 2. 배열 타입 선언\nconst numbers = [1, 2, 3, 4];\nconst names = [\"김상중하\", \"코딩 마스터\", \"프로그래머\"];\nconsole.log(\"배열타입\");\nconsole.log(numbers);\nconsole.log(names);\n// 3. 튜플(Tuple) 타입 선언\nconst userInfo = [\"김상중하\", 20];\nconsole.log(\"튜플타입\");\nconsole.log(userInfo);\n// 4. 유니온 타입 선언\nconst unionType = \"Loading\";\nconsole.log(\"유니온타입\");\nconsole.log(unionType);\n// 위에 데이터 형을 적용한 새로운 변수선언 할당\nconst user1 = {\n    name: \"Alice\",\n    age: 25,\n};\nconst user2 = {\n    name: \"Bob\",\n    age: 30,\n    isActive: true,\n};\nconst user3 = {\n    name: \"Charlie\",\n    age: 35,\n    isActive: false,\n};\nconsole.log(\"객체타입\");\nconsole.log(user1);\nconsole.log(user2);\nconsole.log(user3);\n// 6. 함수의 타입 선언\nfunction sayGoodBye(name, isOpt, message // 선택적 매개변수는 맨 끝에 위치하기\n) {\n    return `${name}! ${message ? message : \"\"} ${isOpt ? \"잘가\" : \"안녕\"}`;\n}\nconsole.log(\"함수타입\");\nconsole.log(sayGoodBye(\"김상중하\", true));\nconsole.log(sayGoodBye(\"코딩 마스터\", false));\nconsole.log(sayGoodBye(\"프로그래머\", false, \"우리나라\"));\n// 7. void 함수: 리턴 값이 없는 함수\nfunction logMessage(name) { }\nconsole.log(\"void 함수\");\nlogMessage(\"김상중하\");\nlogMessage(\"코딩 마스터\");\nlogMessage(\"프로그래머\");\n// 인터섹션 타입을 적용한 새로운 변수선언 할당\nconst employee1 = {\n    name: \"Alice\",\n    company: \"Google\",\n};\nconst employee2 = {\n    name: \"Bob\",\n    company: \"Microsoft\",\n};\nconsole.log(\"인터섹션타입\");\nconsole.log(employee1);\nconsole.log(employee2);\n// 결국 인터섹션은 타입을 여러개 동시에 적용하는 것\nconst student1 = {\n    name: \"Alice\",\n    home: \"Seoul\",\n    age: 20,\n};\nconst student2 = {\n    name: \"Bob\",\n    home: \"Busan\",\n    age: 21,\n};\nconsole.log(\"인터섹션타입\");\nconsole.log(student1);\nconsole.log(student2);\n// 개발자 회사 샘플 찍어보기\nconsole.log(\"개발자 회사 샘플\");\nconsole.log(\"전체 개발자 리스트:\", devTeam_1.devTeam);\nconsole.log(\"frontend 개발자 리스트:\");\nconsole.log((0, devTeam_1.findByRole)(devTeam_1.devTeam, \"Frontend\"));\nconsole.log(\"backend 개발자 리스트:\");\nconsole.log((0, devTeam_1.findByRole)(devTeam_1.devTeam, \"Backend\"));\nconsole.log(\"fullstack 개발자 리스트:\");\nconsole.log((0, devTeam_1.findByRole)(devTeam_1.devTeam, \"Fullstack\"));\nconsole.log(\"활동 중인 개발자 리스트:\");\nconsole.log((0, devTeam_1.getActiveDevelopers)(devTeam_1.devTeam));\nconsole.log(\"TypeScript을 사용한 개발자 리스트:\");\nconsole.log((0, devTeam_1.findBySkill)(devTeam_1.devTeam, \"TypeScript\"));\n"],"names":[],"sourceRoot":""}